@inject IBookService bookService

<Table TItem="BookDto" DataSource="@Books">
    <Selection Key="@(context.Id.ToString())" />
    <Column @bind-Field="@context.Id" Sortable />
    <Column @bind-Field="@context.Title" Sortable />
    <Column @bind-Field="@context.Summary" Sortable />
    <Column @bind-Field="@context.Price" Sortable />
    <Column @bind-Field="@context.Isbn" Sortable />
    <Column @bind-Field="@context.Author" Sortable />
    <Column @bind-Field="@context.Location" Sortable />
    <ActionColumn>
        <Space>
            <SpaceItem><Button Danger OnClick="async ()=>await Delete(context.Id)">Delete</Button></SpaceItem>
            <SpaceItem>
                <a href="/book/details/@context.Id">Details</a>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

@code {
    [Parameter]
    public EventCallback<Guid> OnDelete { get; set; }
    [Parameter]
    public List<BookDto> Books { get; set; }
    [Parameter]
    public EventCallback<QueryParameters> OnScroll { get; set; }
    [Parameter]
    public int TotalSize { get; set; }



    protected override async Task OnInitializedAsync()
    {

        var queryParameters = new BookQueryParameters();
        Books = (await bookService.GetAsync(queryParameters)).Data;
    }

    private async Task Delete(Guid id)
    {
        await OnDelete.InvokeAsync(id);

    }
}
