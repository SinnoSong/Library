@page "/books"
@inject IBookService BookService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime Js

<PageContainer Title="Books">
    <Content>
        <Button OnClick="@(() => NavigationManager.NavigateTo("/books/create"))"></Button>
        <Form Model="@_queryParameters" Layout="Inline" OnFinish="OnFinish">
            <FormItem Label="是否借出">
                <Switch @bind-Value="@context.isLend" Checked="@false"></Switch>
            </FormItem>
            <FormItem>
                <AutoComplete @bind-Value="@context.sort" Options="@_sortOptions" Placeholder="请选择排序字段"/>
            </FormItem>
            <FormItem>
                <Input @bind-Value="@context.title" Placeholder="请输入查询书籍名称"/>
            </FormItem>
            <FormItem>
                <Input @bind-Value="@context.author" Placeholder="请输入作者"/>
            </FormItem>
            <FormItem>
                <Input @bind-Value="@context.ibsn" Placeholder="ibsn"/>
            </FormItem>
            <FormItem>
                <AutoComplete @bind-Value="@context.category" Options="@_categories">
                </AutoComplete>
            </FormItem>
            <FormItem>
                <Button Type="@ButtonType.Primary" HtmlType="submit">
                    Submit
                </Button>
            </FormItem>
        </Form>
    </Content>
    <ChildContent>
        <BookTable Books="@_books" TotalSize="@_totalSize" OnScroll="@GetBooksAsync" OnDelete="@Delete"></BookTable>
    </ChildContent>
</PageContainer>

@code {
    private readonly List<string> _sortOptions = new() {"title", "author", "ibsn", "category"};
    private List<string> _categories = new();
    private List<BookDto> _books = new() {new BookDto {Title = "123981"}, new BookDto {Title = "book1"}};
    private int _totalSize = 50;
    private readonly BookQueryParameters _queryParameters = new();

    protected override async Task OnInitializedAsync()
    {
    //var response = await bookService.GetAsync(new BookQueryParameters());
    //if (response.Success)
    //{
    //    Books = response.Data;
    //}
        var categoryResponse = await CategoryService.GetAsync(new CategoryQueryParameters());
        if (categoryResponse.Success)
        {
            _categories = categoryResponse.Data.Select(category => category.Name).ToList();
        }
    }

    private async Task OnFinish(EditContext context)
    {
        await GetBooksAsync(_queryParameters);
    }

    private async Task GetBooksAsync(BookQueryParameters queryParameters)
    {
        var result = await BookService.GetAsync(queryParameters);
        _books = result.Data;
    // todo 总数不对，待修改
        _totalSize = result.Data.Count;
    }

    private async Task Delete(Guid bookId)
    {
        var book = _books.First(q => q.Id == bookId);
        var confirm = await Js.InvokeAsync<bool>("confirm", $"Are You Sure You Want To Delete {book.Title}?");
        if (confirm)
        {
            var response = await BookService.DeleteAsync(bookId.ToString());
            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }

}