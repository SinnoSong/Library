@page "/books"
@inject IBookService BookService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject ModalService ModalService
@inject MessageService MessageService

<PageContainer Title="书籍">
    <Content>
        <Card>
            <Button OnClick="@(() => NavigationManager.NavigateTo("/books/create"))">创建书籍</Button>
        </Card>
        <Card>
            <Form Model="@_queryParameters" Layout="Inline" OnFinish="OnFinish">
                <FormItem Label="是否借出">
                    <Switch @bind-Value="@context.IsLend" Checked="@false"></Switch>
                </FormItem>
                <FormItem>
                    <AutoComplete @bind-Value="@context.Sort" Options="@_sortOptions" Placeholder="请选择排序字段"/>
                </FormItem>
                <FormItem>
                    <Input @bind-Value="@context.Title" Placeholder="请输入查询书籍名称"/>
                </FormItem>
                <FormItem>
                    <Input @bind-Value="@context.Author" Placeholder="请输入作者"/>
                </FormItem>
                <FormItem>
                    <Input @bind-Value="@context.Ibsn" Placeholder="ibsn"/>
                </FormItem>
                <FormItem>
                    <AutoComplete @bind-Value="@context.Category" Options="@_categories" Placeholder="请选择书籍类别">
                    </AutoComplete>
                </FormItem>
                <FormItem>
                    <Button Type="@ButtonType.Primary" HtmlType="submit">
                        查询
                    </Button>
                </FormItem>
            </Form>
        </Card>
    </Content>
    <ChildContent>
        <BookTable Books="@_books" OnDelete="@Delete"></BookTable>
    </ChildContent>
</PageContainer>

@code {
    private readonly List<string> _sortOptions = new() {"title", "author", "ibsn", "category"};
    private List<string> _categories = new();
    private List<BookDto> _books = new();
    private readonly BookQueryParameters _queryParameters = new();

    protected override async Task OnInitializedAsync()
    {
        await OnFinish();
        var categoryResponse = await CategoryService.GetAsync(new CategoryQueryParameters());
        if (categoryResponse.Success)
        {
            _categories = categoryResponse.Data.Select(category => category.Name).ToList();
        }
    }

    private async Task OnFinish()
    {
        var result = await BookService.GetAsync(_queryParameters);
        _books = result.Data;
    }

    private Task Delete(Guid bookId)
    {
        var book = _books.First(q => q.Id == bookId);
        ModalService.Confirm(new ConfirmOptions
        {
            Title = "删除书籍",
            Content = $"是否删除Id为：{book.Id}的书籍?",
            OnOk = async _ =>
            {
                var response = await BookService.DeleteAsync(bookId.ToString());
                if (response.Success)
                {
                    await OnInitializedAsync();
                }
                else
                {
                    await MessageService.Error(response.Message);
                }
            },
            OkType = "danger"
        });
        return Task.CompletedTask;
    }

}