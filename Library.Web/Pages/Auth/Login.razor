@page "/login"
@inject IAuthenticationService authService
@inject NavigationManager navManager

<h3>Login</h3>

@if (!string.IsNullOrEmpty(_message))
{
    <div class="alert alert-danger">
        <p>@_message</p>
    </div>
}

<div>
    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="UserName">UserName</label>
            <InputText class="form-control" @bind-Value="loginModel.UserName" />
            <ValidationMessage For="@(() => loginModel.UserName)" />
        </div>
        <br />
        <div class="form-group">
            <label for="password">Password</label>
            <InputText class="form-control" type="password" @bind-Value="loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>
        <br />
        <Button Type="submit" class="btn btn-primary btn-block">Login</Button>
    </EditForm>

</div>

@code {

    LoginUserDto loginModel = new();
    private string? _message;

    private async Task HandleLogin()
    {
        var response = await authService.AuthenticateAsync(loginModel);

        if (response.Success)
        {
            navManager.NavigateTo("/");
        }

        _message = response.Message;
    }

}