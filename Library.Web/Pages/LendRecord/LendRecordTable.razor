@inject ILendRecordService LendRecordService
@inject ModalService ModalService
@inject MessageService MessageService

<Table TItem="LendRecordDto" DataSource="Records">
    <Selection Key="@(context.Id.ToString())"/>
    <Column @bind-Field="@context.Id" Sortable/>
    <Column @bind-Field="@context.BookId" Sortable/>
    <Column @bind-Field="@context.StartTime" Sortable/>
    <Column @bind-Field="@context.EndTime" Sortable/>
    <Column @bind-Field="@context.RealReturnTime" Sortable/>
    <Column @bind-Field="@context.Processor" Sortable/>
    <ActionColumn>
        <Space>
            <SpaceItem>
                <Button Danger OnClick="@(async () => await Delete(context.Id))">归还图书</Button>
            </SpaceItem>
            @{
                if (context.RealReturnTime == null)
                {
                    <SpaceItem>
                        <Button Danger OnClick="@(async () => await OnReturnBook(context.Id))">归还图书</Button>
                    </SpaceItem>
                }
            }
            @{
                if (!context.HasRenew && (DateTime.Now - context.EndTime).Days is < 3 and > 0)
                {
                    <SpaceItem>
                        <Button Danger OnClick="@()">续借</Button>
                    </SpaceItem>
                }
            }
            <SpaceItem>
                <a href="/lendRecords/detail/@context.Id">Details</a>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

@code {

    [Parameter]
    public List<LendRecordDto> Records { get; set; } = null!;

    [Parameter]
    public EventCallback<Guid> OnDelete { get; set; }

    private async Task Delete(Guid guid)
    {
        await OnDelete.InvokeAsync(guid);
    }

    private async Task OnReturnBook(Guid recordId)
    {
        var response = await LendRecordService.GetAsync(recordId.ToString());
        if (response.Success)
        {
            var content = "是否归还图书？";
            var data = response.Data;
            var penalty = (data.RealReturnTime - DateTime.Now)!.Value.Days;
            if (penalty != 0)
            {
                content = $"请读者缴纳违约金：{penalty}元后，进行归还图书操作";
            }
            ModalService.Confirm(new ConfirmOptions()
            {
                Title = "归还图书",
                Content = content,
                OnOk = async (e) =>
                {
                    var resp = await LendRecordService.PutAsync(recordId.ToString());
                    if (resp.Success)
                    {
                        await OnInitializedAsync();
                    }
                    else
                    {
                        await MessageService.Error(resp.Message);
                    }
                },
                OkType = "danger",
                OkText = "归还图书"
            });
        }
    }

    private Task OnRenew(Guid recordId)
    {
        ModalService.Confirm(new ConfirmOptions()
        {
            Title = "续借书籍",
            Content = "是否续借书籍，进行续借会再原归还时间基础上延长 7 天",
            OnOk = async (e) =>
            {
                var resp = await LendRecordService.RenewAsync(recordId.ToString());
                if (resp.Success)
                {
                    await OnInitializedAsync();
                }
                else
                {
                    await MessageService.Error(resp.Message);
                }
            },
            OkType = "danger",
            OkText = "归还图书"
        });
        return Task.CompletedTask;
    }

}