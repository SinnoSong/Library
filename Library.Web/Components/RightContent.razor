@using Blazored.LocalStorage
@using Microsoft.IdentityModel.JsonWebTokens
@inherits AntDomComponentBase
@inject INoticeService NoticeService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavManager
@inject IMapper Mapper 
@inject ILocalStorageService LocalStorageService

<Space Class="@ClassMapper.Class" Size="@("24")">
    <SpaceItem>
        <AvatarDropdown Name="@_userName"
                        MenuItems="@AvatarMenuItems"
                        OnItemSelected="HandleSelectUser"/>
    </SpaceItem>
</Space>

@code {
    private string? _userName;

    private AvatarMenuItem[] AvatarMenuItems { get; } = {
        new() {Key = "setting", IconType = "setting", Option = "个人设置"},
        new() {IsDivider = true},
        new() {Key = "logout", IconType = "logout", Option = "退出登录"}
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SetClassMap();
        _userName = await SetUser();
    }

    private void SetClassMap()
    {
        ClassMapper.Clear().Add("right");
    }

    private async Task<string?> SetUser()
    {
        var authenticationState = await AuthProvider.GetAuthenticationStateAsync();
        return authenticationState.User.Claims.FirstOrDefault(claim => claim.Type == JwtRegisteredClaimNames.Sub)?.Value;
    }

    private async Task<List<NoticeIconData>> SetNotices()
    {
        var response = await NoticeService.GetAsync(new QueryParameters());
        var data = new List<NoticeNoContentVo>();
        if (response.Success)
        {
            data = response.Data;
        }
        return Mapper.Map<List<NoticeIconData>>(data);
    }

    private void HandleSelectUser(MenuItem item)
    {
        switch (item.Key)
        {
            case "center":
                NavManager.NavigateTo("/account/center");
                break;
            case "setting":
                NavManager.NavigateTo("/account/settings");
                break;
            case "logout":
                NavManager.NavigateTo("/user/login");
                break;
        }
    }

}